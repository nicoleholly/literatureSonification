{
  "_args": [
    [
      "data-piano@^0.3.0",
      "/Users/Nicole/Desktop/Git/SpotifyAutomatic/literatureSonification"
    ]
  ],
  "_from": "data-piano@>=0.3.0 <0.4.0",
  "_id": "data-piano@0.3.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/data-piano",
  "_npmUser": {
    "email": "harrison.massey@gmail.com",
    "name": "harrisonm"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "name": "data-piano",
    "raw": "data-piano@^0.3.0",
    "rawSpec": "^0.3.0",
    "scope": null,
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/data-piano/-/data-piano-0.3.0.tgz",
  "_shasum": "1261db4711da3e2b881ac682ff9b6b3784e6b34a",
  "_shrinkwrap": null,
  "_spec": "data-piano@^0.3.0",
  "_where": "/Users/Nicole/Desktop/Git/SpotifyAutomatic/literatureSonification",
  "author": {
    "email": "harrisonm@utdallas.edu",
    "name": "Harrison Massey",
    "url": "https://github.com/Harrison-M"
  },
  "bugs": {
    "url": "https://github.com/emac-utd/data-piano/issues"
  },
  "dependencies": {
    "inherits": "2.0.x"
  },
  "description": "Normalize numeric data and map it to piano keys",
  "devDependencies": {
    "grunt-contrib-watch": "0.5.x",
    "grunt-jasmine-node": "0.1.x"
  },
  "directories": {},
  "dist": {
    "shasum": "1261db4711da3e2b881ac682ff9b6b3784e6b34a",
    "tarball": "http://registry.npmjs.org/data-piano/-/data-piano-0.3.0.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/emac-utd/data-piano",
  "keywords": [
    "baudio",
    "midi",
    "music",
    "sonification"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "harrisonm",
      "email": "harrison.massey@gmail.com"
    }
  ],
  "name": "data-piano",
  "optionalDependencies": {},
  "readme": "data-piano\n==========\n\n[![Build Status](https://travis-ci.org/emac-utd/data-piano.png?branch=master)](https://travis-ci.org/emac-utd/data-piano)\n\nMap numeric data to MIDI keyboard keys (where key 60 is Middle C)\n\nCreated primarily for use with [baudio](https://github.com/substack/baudio), but should work for other sound synthesis projects\n\nReference\n---------\n\n[Wikipedia article on piano key frequencies](https://en.wikipedia.org/wiki/Piano_key_frequencies) (note that this uses a standard 88-key piano rather than a MIDI keyboard)\n\n[Dominique Vandennucker's MIDI tutorial for programmers](http://www.music-software-development.com/midi-tutorial.html)\n\nExample\n-------\n```javascript\nvar DataPiano = require('data-piano')\nvar baudio = require('baudio')\n\nvar data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\nvar piano = new DataPiano({\n    data: data, //Note data\n    velocityData: data, //MIDI velocity data\n    lowKey: 60, //C4\n    highKey: 71, //B4\n    lowVelocity: 42, //piano\n    highVelocity: 80, //forte\n    stopVelocity: 80 //Velocity sent with midi stop command, usually doesn't matter\n  })\n\nconsole.log(piano.keys) //[60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71]\nconsole.log(piano.freqs) //Associated note frequency for each key\nconsole.log(piano.velocities) //Associated velocity for each key\n\n//Play two notes every second with baudio\nvar playFunc = piano.getSinPlayFunc(2)\nvar b = baudio(playFunc)\nb.play()\n\n//Get node-midi compatible \"note on\" message for the first beat\nvar firstBeat = piano.getMidiPlayFunc(0)(0)\nconsole.log(firstBeat) //[144, 60, 42]\n```\n\nDefaults\n--------\n\n```javascript\n{\n  data: undefined, //Required\n  velocityData: undefined, //Not required, defaults to generating constant velocity from averaging high and low\n  lowKey: 60, //C4\n  highKey: 71, //B4\n  lowVelocity: 0,\n  highVelocity: 127,\n  stopVelocity: (lowVelocity+highVelocity)/2\n}\n```\n\nAPI\n---\n\n###var DataPiano = require('data-piano')\n\nMain class for data-piano\n\n###DataPiano.keyToFreq(key)\n###DataPiano#keyToFreq(key)\n\nUtility function that returns the corresponding frequency for a given piano key.  Can be used as either a static or instance method.\n\n###DataPiano#getSinPlayFunc(bps)\n\nReturns a function of time that represents the data played in sequence as sine waves, changing to the next key `bps` times per second\n\n###DataPiano#getSquarePlayFunc(bps)\n\nReturns a function of time that represents the data played in sequence as square waves, changing to the next key `bps` times per second\n\n###DataPiano#getSawtoothPlayFunc(bps)\n\nReturns a function of time that represents the data played in sequence as sawtooth waves, changing to the next key `bps` times per second\n\n###DataPiano#getMidiPlayFunc(channel)\n\nReturns a function of beat # that represents the midi instruction to play the data in sequence, changing to the next key on each beat of the midi clock\n\n###DataPiano#getMidiStopFunc(channel)\n\nReturns a function of beat # that represents the midi instruction to turn off the note from the previous beat, an instruction that must be passed every time you want to change to a new note\n\n###DataPiano#read/DataPiano#pipe\n\nDataPiano instances are also [readable streams](https://github.com/substack/stream-handbook#readable-streams), and will output a looping bytestream of midi messages that will turn on and off beat notes in sequence.  It is up to the consumer to provide timing and midi port interfacing.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/emac-utd/data-piano.git"
  },
  "scripts": {
    "test": "grunt travis --verbose"
  },
  "version": "0.3.0"
}
